from flask import Flask,render_template
from threading import Thread

import telebot
import random
import datetime
import requests
import os

from telebot import types
from bs4 import BeautifulSoup

bot_token = token=os.environ.get('token')
weather_api = 'c504a5e558cf4816ec8efa2fc962a225'
EUR_UAH = 'https://minfin.com.ua/currency/eur/'
EUR_UAH_BANK = 'https://minfin.com.ua/currency/banks/eur/'
USD_UAH_BANK = 'https://minfin.com.ua/currency/banks/usd/'
BTC_USD = 'https://www.binance.com/ru/price/bitcoin'
ETH_USD = 'https://www.binance.com/ru/price/ethereum'
user_agent = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)'
                            ' AppleWebKit/537.36 (KHTML, like Gecko)'
                            ' Chrome/104.0.5112.102 Safari/537.36 OPR/90.0.4480.100'}

bot = telebot.TeleBot(bot_token)

app = Flask(__name__)

@app.route('/')
def index():
  return "Alive"

def run():
  app.run(host='0.0.0.0',port=8080)

def keep_alive():
  t=Thread(target=run)
  t.start
  

@bot.message_handler(commands=['start'])
def start(message):
    mainMenu = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)

    rndm = types.KeyboardButton('üî∏ –°–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞')
    wthr = types.KeyboardButton('‚òÄÔ∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã')
    exchng = types.KeyboardButton('üìä –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç')
    inf = types.KeyboardButton('üìï –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')

    mainMenu.add(rndm, wthr, exchng, inf)

    hello = (f"–ü—Ä–∏–≤–µ—Ç <b>{message.from_user.first_name} {message.from_user.last_name}</b>!\n"
             f"–≠—Ç–æ –±–æ—Ç —Å <b>—Ñ—É–Ω–∫—Ü–∏—è–º–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª, –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã, –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π</b>.")
    bot.send_message(message.chat.id, hello, parse_mode='html', reply_markup=mainMenu)


@bot.message_handler(content_types=['text'])
def get_user_text(message):
    if message.text == 'üî∏ –°–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞':
        rndmMenu = types.ReplyKeyboardMarkup(resize_keyboard=True)

        to10 = types.KeyboardButton('üî∏ –û—Ç 1 –¥–æ 10')
        to100 = types.KeyboardButton('üî∏ –û—Ç 1 –¥–æ 100')
        to1000 = types.KeyboardButton('üé≤ –ö–∏–Ω—É—Ç—å –∫—É–±–∏–∫')
        back = types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')

        rndmMenu.add(to10, to100, to1000, back)

        rndm_choise = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª."
        bot.send_message(message.chat.id, rndm_choise, parse_mode='html', reply_markup=rndmMenu)
    elif message.text == 'üî∏ –û—Ç 1 –¥–æ 10':
        rndm10 = f"–í–∞—à–µ —á–∏—Å–ª–æ: <u>{random.randint(1, 10)}</u>"
        bot.send_message(message.chat.id, rndm10, parse_mode='html')
    elif message.text == 'üî∏ –û—Ç 1 –¥–æ 100':
        rndm100 = f"–í–∞—à–µ —á–∏—Å–ª–æ: <u>{random.randint(1, 100)}</u>"
        bot.send_message(message.chat.id, rndm100, parse_mode='html')
    elif message.text == 'üé≤ –ö–∏–Ω—É—Ç—å –∫—É–±–∏–∫':
        bot.send_dice(message.chat.id)
    elif message.text == '‚òÄÔ∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã':
        wthrMenu = types.ReplyKeyboardMarkup(resize_keyboard=True)

        back = types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')

        wthrMenu.add(back)
        wthr_req_text = f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏, –≥–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É."
        wthr_req = bot.send_message(message.chat.id, wthr_req_text, parse_mode='html', reply_markup=wthrMenu)
        bot.register_next_step_handler(wthr_req, get_weather)
    elif message.text == 'üìä –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç':
        exchngMenu = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)

        btnUSD = types.KeyboardButton('USD')
        btnEUR = types.KeyboardButton('EUR')
        btnBTC = types.KeyboardButton('BTC')
        btnETH = types.KeyboardButton('ETH')
        back = types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')

        exchngMenu.add(btnUSD, btnEUR, btnBTC, btnETH, back)

        exchng_choise = f"–í—ã–±–µ—Ä–∏—Ç–µ, –∫—É—Ä—Å –∫–∞–∫–æ–π –≤–∞–ª—é—Ç—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å."
        bot.send_message(message.chat.id, exchng_choise, parse_mode='html', reply_markup=exchngMenu)
    elif message.text == 'USD':
        try:
            full_page_usd_bank = requests.get(USD_UAH_BANK, headers=user_agent)
            soup_usd_bank = BeautifulSoup(full_page_usd_bank.content, 'html.parser')
            convert_usd_bank = soup_usd_bank.findAll("td", {"class": "mfm-text-nowrap"})

            for div in soup_usd_bank.findAll("span", {"class": "mfm-hover-show mfm-table-trend icon-up-open"}):
                div.decompose()
            for div in soup_usd_bank.findAll("span", {"class": "mfm-hover-show mfm-table-trend icon-down-open"}):
                div.decompose()
            for div in soup_usd_bank.findAll("span", {"class": "mfm-text-light-grey mfm-posr"}):
                div.decompose()

            s_usd = convert_usd_bank[0].text.strip().split()

            exchng_usd = (f"---–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –≤ –±–∞–Ω–∫–∞—Ö---\n"
                          f"–ü–æ–∫—É–ø–∫–∞ –¥–æ–ª–ª–∞—Ä–∞: ‚Ç¥ {s_usd[0]}\n"
                          f"–ü—Ä–æ–¥–∞–∂–∞ –¥–æ–ª–ª–∞—Ä–∞: ‚Ç¥ {s_usd[1]}\n")
            bot.send_message(message.chat.id, exchng_usd, parse_mode='html')
        except:
            bot.send_message(message.chat.id, "–ö—É—Ä—Å —Å–µ–π—á–∞—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω...", parse_mode='html')
    elif message.text == 'EUR':
        try:
            full_page_eur_bank = requests.get(EUR_UAH_BANK, headers=user_agent)
            soup_eur_bank = BeautifulSoup(full_page_eur_bank.content, 'html.parser')
            convert_eur_bank = soup_eur_bank.findAll("td", {"class": "mfm-text-nowrap"})

            for div in soup_eur_bank.findAll("span", {"class": "mfm-hover-show mfm-table-trend icon-up-open"}):
                div.decompose()
            for div in soup_eur_bank.findAll("span", {"class": "mfm-hover-show mfm-table-trend icon-down-open"}):
                div.decompose()
            for div in soup_eur_bank.findAll("span", {"class": "mfm-text-light-grey mfm-posr"}):
                div.decompose()

            s_eur = convert_eur_bank[0].text.strip().split()

            exchng_eur = (f"---–ö—É—Ä—Å –µ–≤—Ä–æ –≤ –±–∞–Ω–∫–∞—Ö---\n"
                          f"–ü–æ–∫—É–ø–∫–∞ –µ–≤—Ä–æ: ‚Ç¥ {s_eur[0]}\n"
                          f"–ü—Ä–æ–¥–∞–∂–∞ –µ–≤—Ä–æ: ‚Ç¥ {s_eur[1]}\n")
            bot.send_message(message.chat.id, exchng_eur, parse_mode='html')
        except:
            bot.send_message(message.chat.id, "–ö—É—Ä—Å —Å–µ–π—á–∞—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω...", parse_mode='html')
    elif message.text == 'BTC':
        try:
            full_page_btc = requests.get(BTC_USD)
            soup_btc = BeautifulSoup(full_page_btc.content, 'html.parser')
            convert_btc = soup_btc.findAll(name="div", attrs="css-1bwgsh3")
            final_btc = convert_btc[0].text

            exchng_btc = (f"---–ö—É—Ä—Å –ë–∏—Ç–∫–æ–∏–Ω–∞---\n"
                          f"–¶–µ–Ω–Ω–∞ –ë–∏—Ç–∫–æ–∏–Ω–∞: {final_btc}\n")
            bot.send_message(message.chat.id, exchng_btc, parse_mode='html')
        except:
            bot.send_message(message.chat.id, "–ö—É—Ä—Å —Å–µ–π—á–∞—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω...", parse_mode='html')
    elif message.text == 'ETH':
        try:
            full_page_eth = requests.get(ETH_USD, headers=user_agent)
            soup_eth = BeautifulSoup(full_page_eth.content, 'html.parser')
            convert_eth = soup_eth.findAll("div", {"class": "css-1bwgsh3"})

            exchng_eth = (f"---–ö—É—Ä—Å –≠—Ñ–∏—Ä–∏—É–º–∞---\n"
                          f"–¶–µ–Ω–Ω–∞ –≠—Ñ–∏—Ä–∏—É–º–∞: {convert_eth[0].text.strip()}")
            bot.send_message(message.chat.id, exchng_eth, parse_mode='html')
        except:
            bot.send_message(message.chat.id, "–ö—É—Ä—Å —Å–µ–π—á–∞—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω...", parse_mode='html')
    elif message.text == 'üìï –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
        infMenu = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

        inf_me = types.KeyboardButton('üìó –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ')
        inf_bot = types.KeyboardButton('üìô –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ')
        back = types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')

        infMenu.add(inf_me, inf_bot, back)

        inf_choise = f"–í—ã–±–µ—Ä–∏—Ç–µ –æ –∫–æ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
        bot.send_message(message.chat.id, inf_choise, parse_mode='html', reply_markup=infMenu)
    elif message.text == 'üìó –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ':
        inf_me = (f"---–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ---\n"
                  f"–ò–º—è: {message.from_user.first_name}\n"
                  f"–§–∞–º–∏–ª–∏—è: {message.from_user.last_name}\n"
                  f"–ù–∏–∫–Ω–µ–π–º: {message.from_user.username}\n"
                  f"ID: {message.from_user.id}\n"
                  f"–ë–æ—Ç: {message.from_user.is_bot}\n"
                  f"–ü—Ä–µ–º–∏—É–º: {message.from_user.is_premium}")
        bot.send_message(message.chat.id, inf_me, parse_mode='html')
    elif message.text == 'üìô –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ':
        inf_bot = (f"–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –±–æ—Ç —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏:\n"
                   f"¬∑ –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª\n"
                   f"¬∑ –ü—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã\n"
                   f"¬∑ –ö—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç(–ø–æ –ú–∏–Ω–§–∏–Ω) –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç(–ø–æ –ë–∏–Ω–∞–Ω—Å)\n"
                   f"¬∑ –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        bot.send_message(message.chat.id, inf_bot, parse_mode='html')
    elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        mainMenu = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)

        rndm = types.KeyboardButton('üî∏ –°–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞')
        wthr = types.KeyboardButton('‚òÄÔ∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã')
        exchng = types.KeyboardButton('üìä –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç')
        inf = types.KeyboardButton('üìï –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')

        mainMenu.add(rndm, wthr, exchng, inf)

        bck = f"–û–±—Ä–∞—Ç–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é..."
        bot.send_message(message.chat.id, bck, parse_mode='html', reply_markup=mainMenu)
    else:
        dont_und = f"–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é..."
        bot.send_message(message.chat.id, dont_und, parse_mode='html')


@bot.message_handler(content_types=['text'])
def get_weather(message):
    smile = {
        "Thunderstorm": "–ì—Ä–æ–∑–∞ üå©",
        "Drizzle": "–ú–æ—Ä–æ—Å—å üå´",
        "Rain": "–î–æ–∂–¥—å üåßÔ∏è",
        "Snow": "–°–Ω–µ–≥ ‚ùÑÔ∏è",
        "Clear": "–°–æ–ª–Ω—Ü–µ ‚òÄÔ∏è",
        "Clouds": "–û–±–ª–∞–∫–∞ ‚òÅÔ∏è",
        "Mist": "–¢—É–º–∞–Ω üå´",
        "Smoke": "–î—ã–º üå´",
        "Haze": "–¢—É–º–∞–Ω üå´",
        "Dust": "–ü—ã–ª—å üå´",
        "Fog": "–¢—É–º–∞–Ω üå´",
        "Sand": "–ü–µ—Å–æ–∫ üå´",
        "Ash": "–ü–µ–ø–µ–ª üå´",
        "Squall": "–®–∫–≤–∞–ª üå´",
        "Tornado": "–¢–æ—Ä–Ω–∞–¥–æ üå™"
    }
    if message.text != '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        try:
            weather_url = f'http://api.openweathermap.org/data/2.5/weather?appid={weather_api}&q={message.text}&units=metric'

            data = requests.get(weather_url).json()

            city = data['name']
            temp = data['main']['temp']

            weather_description = data['weather'][0]['main']
            if weather_description in smile:
                wd = smile[weather_description]
            else:
                wd = "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —á—Ç–æ –∑–∞ –æ–∫–Ω–æ–º..."

            feels_like = data['main']['feels_like']
            humidity = data['main']['humidity']
            pressure = data['main']['pressure']
            wind = data['wind']['speed']
            sunrise = datetime.datetime.fromtimestamp(data['sys']['sunrise'])
            sunset = datetime.datetime.fromtimestamp(data['sys']['sunset'])
            lenght_of_day = sunset - sunrise

            wthr_info = (f"–ü–æ–≥–æ–¥–∞ –≤ –º–µ—Å—Ç–µ: {city}\n"
                         f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}C¬∞\n"
                         f"{wd}\n"
                         f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}C¬∞\n"
                         f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                         f"–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç\n"
                         f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind} –º/—Å\n"
                         f"–í–æ—Å—Ö–æ–¥: {sunrise}\n"
                         f"–ó–∞–∫–∞—Ç: {sunset}\n"
                         f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {lenght_of_day}")

            wthr_text = bot.send_message(message.chat.id, wthr_info, parse_mode='html')
            bot.register_next_step_handler(wthr_text, get_weather)

        except:
            wthr_wrm = f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è!"
            wthr_text = bot.send_message(message.chat.id, wthr_wrm, parse_mode='html')
            bot.register_next_step_handler(wthr_text, get_weather)
    elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        mainMenu = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)

        rndm = types.KeyboardButton('üî∏ –°–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞')
        wthr = types.KeyboardButton('‚òÄÔ∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã')
        exchng = types.KeyboardButton('üìä –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç')
        inf = types.KeyboardButton('üìï –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')

        mainMenu.add(rndm, wthr, exchng, inf)

        bck = f"–û–±—Ä–∞—Ç–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é..."
        bot.send_message(message.chat.id, bck, parse_mode='html', reply_markup=mainMenu)


if __name__ == "__main__":
    bot.polling(none_stop=True)
